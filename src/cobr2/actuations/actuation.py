import elastica as ea
import numpy as np

from cobr2.actuations.actuation_tool import (
    apply_load,
    internal_load_to_equivalent_external_load,
)


class ContinuousActuation:
    """
    Classes inherited from this base class should contain parameters and
    functions that describe and calculate forces / couples generated by
    actuators.
    """

    def __init__(self, n_elements: int):
        n_dim = 3
        self.n_elements = n_elements

        self.internal_force = np.zeros((n_dim, n_elements))  # material frame
        self.internal_couple = np.zeros(
            (n_dim, n_elements - 1)
        )  # material frame

        self.equivalent_external_force = np.zeros(
            (n_dim, n_elements + 1)
        )  # lab frame
        self.equivalent_external_couple = np.zeros(
            (n_dim, n_elements)
        )  # material frame

    def reset(
        self,
    ) -> None:
        # Reset actuation forces / couples to be zero.
        self.internal_force[:, :] *= 0
        self.internal_couple[:, :] *= 0
        self.equivalent_external_force[:, :] *= 0
        self.equivalent_external_couple[:, :] *= 0

    def __call__(self, system: ea.CosseratRod) -> None:
        # Calculate equivalent external forces / couples from internal forces / couples.
        internal_load_to_equivalent_external_load(
            system.director_collection,
            system.kappa,
            system.tangents,
            system.rest_lengths,
            system.rest_voronoi_lengths,
            system.dilatation,
            system.voronoi_dilatation,
            self.internal_force,
            self.internal_couple,
            self.equivalent_external_force,
            self.equivalent_external_couple,
        )


class ApplyActuations(ea.NoForces):  # type: ignore
    """
    This class is used to apply actuations, including forces and couples, to the rod.
    """

    def __init__(self, actuations: list[ContinuousActuation]):
        super().__init__()
        self.actuations = actuations

    def apply_forces(self, system: ea.CosseratRod, time: float = 0.0) -> None:
        for actuation in self.actuations:
            actuation.reset()
            actuation(system)
            apply_load(
                system.external_forces, actuation.equivalent_external_force
            )
            apply_load(
                system.external_torques, actuation.equivalent_external_couple
            )
